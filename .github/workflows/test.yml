name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend, infrastructure]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
            infrastructure/package-lock.json

      - name: Install dependencies
        run: |
          npm install
          cd ${{ matrix.component }} && npm install

      - name: Run linting
        run: cd ${{ matrix.component }} && npm run lint

      - name: Run unit tests
        run: cd ${{ matrix.component }} && npm test
        if: matrix.component != 'infrastructure'

      - name: Run infrastructure tests
        run: cd ${{ matrix.component }} && npm test
        if: matrix.component == 'infrastructure'
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.component == 'backend' || matrix.component == 'frontend'
        with:
          directory: ${{ matrix.component }}/coverage
          flags: ${{ matrix.component }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,lambda,apigateway
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
            infrastructure/package-lock.json

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Setup test environment
        run: |
          # Create test S3 bucket
          aws --endpoint-url=http://localhost:4566 s3 mb s3://test-invoice-bucket
          
          # Create test DynamoDB table
          aws --endpoint-url=http://localhost:4566 dynamodb create-table \
            --table-name test-invoice-table \
            --attribute-definitions \
              AttributeName=PK,AttributeType=S \
              AttributeName=SK,AttributeType=S \
            --key-schema \
              AttributeName=PK,KeyType=HASH \
              AttributeName=SK,KeyType=RANGE \
            --billing-mode PAY_PER_REQUEST
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1

      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          TABLE_NAME: test-invoice-table
          BUCKET_NAME: test-invoice-bucket

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
            infrastructure/package-lock.json

      - name: Install dependencies
        run: |
          npm install
          cd frontend && npm install
          cd ../tests/e2e && npm install

      - name: Build frontend
        run: cd frontend && npm run build

      - name: Start frontend server
        run: cd frontend && npm start &
        env:
          CI: true

      - name: Wait for frontend
        run: |
          echo "Waiting for frontend to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run E2E tests
        run: cd tests/e2e && npm test

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: tests/e2e/results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            backend/package-lock.json
            frontend/package-lock.json
            infrastructure/package-lock.json

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Run load tests against staging environment
          k6 run tests/performance/load-test.js
        env:
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: performance-results.json
